---
title: "Untitled"
format: html
editor: visual
---

```{r setup warning = F, message = F}
library(tidyverse)
library(rstan)
library(extrafont)
loadfonts(device = c("all", "pdf", "postscript", "win"))
`%nin%` <- Negate(`%in%`)
# Custom ggplot theme to make pretty plots
# Get the font at https://fonts.google.com/specimen/Jost
theme_nice <- function() {
  theme_minimal(base_family = "Jost") +
    theme(panel.grid.minor = element_blank(),
          plot.title = element_text(family = "Jost", face = "bold"),
          axis.title = element_text(family = "Jost Medium"),
          strip.text = element_text(family = "Jost", face = "bold",
                                    size = rel(1), hjust = 0),
          strip.background = element_rect(fill = "grey80", color = NA))
}
```

```{r}
crom <- data.frame(crom = colnames(numHap)[-1]) %>% 
  separate(crom, c("cno", "snp"), "_") %>% 
  mutate(cno = str_replace(cno, "S", "")) %>% 
  rowid_to_column("site_no")
```

```{r}
posterior_probability <- function(mEffect){
  ## Probability of negative effect
  pNeg <- sum(ifelse(mEffect < 0,1,0 ))/length(mEffect)
  ## Probability of positive effect
  pPos <- sum(ifelse(mEffect > 0,1,0 ))/length(mEffect)
  
  out <- matrix(c(pNeg, pPos), ncol = 2)
  colnames(out) <- c("pneg", "ppos")
  return(out)
}

```

# Read model

```{r}
model <- readRDS("../output/model output/GPmodel_OptLambda.RData")
```

# Extract SNP effect on yield plasticity

```{r}
nsnp <- nrow(crom)

ppMatrix <- matrix(NA,1,4)
for (snp in 1:nsnp){
  parameter <- paste0("B[",snp,"]")
  snpPost <- rstan::extract(model, pars = parameter)
  snpPost <- as.vector(unlist(snpPost))
  
  meanSNPEffect <- mean(snpPost)
  
  snpProb <- posterior_probability(snpPost)
  ppMatrix <- rbind(ppMatrix,cbind(snpProb, snp,meanSNPEffect))
  
}
```

# Wrangle data

```{r}
outModel <- 
as.data.frame(ppMatrix)[,c(1:2,4)] %>% 
  drop_na() %>% 
  cbind(crom) %>% 
  pivot_longer(cols = c(pneg, ppos), 
               values_to = "pprob", 
               names_to = "direction") %>% 
  group_by(cno,snp) %>% 
  mutate(.,
         ## Keep only highest probability
         pprob = case_when(pprob == max(pprob)~pprob, T~NA_real_),
         snp = as.double(snp)) %>% 
  drop_na() 

data_cum <- 
outModel %>% 
  group_by(cno) %>% 
  summarise(max_bp = max(snp)) %>% 
  mutate(bp_add = lag(cumsum(max_bp), default = 0)) %>% 
  select(cno, bp_add)

model_data <- outModel %>% 
  inner_join(data_cum, by = "cno") %>% 
  mutate(bp_cum = snp + bp_add) %>% 
  ungroup()

axis_set <- model_data %>% 
  group_by(cno) %>% 
  summarize(center = mean(bp_cum))

top50 <- 
  model_data %>% 
  slice_max(pprob, n = 50) %>% 
  mutate(SNP = paste0("S",cno, "_", snp))
```

# Manhattan plot

```{r}
mhkPlot <- 
model_data %>% 
  ggplot(aes(x = bp_cum, y = pprob, fill = cno,size =pprob
             ))+
  geom_point(shape = 21, size=2, alpha =0.5)+
  geom_hline(aes(yintercept = min(top50$pprob)), linewidth = 0.8)+
  scale_shape_manual(values = c(21,22))+
  scale_x_continuous(
    label = axis_set$cno,
    breaks = axis_set$center
  )+
  scale_size_continuous(range = c(0.5, 3)) +
  scale_fill_manual(values = rep(
    c("red3", "blue4"),
    unique(length(axis_set$cno))
  )) +
  labs(
    x = NULL,
    y = "Posterior Probability", 
    title = expression(paste(lambda[beta],
                             " = 0.0035; solid line is the uperbound of the .999 HDI of posterior probabilities"))) +
  theme_minimal() +
  theme(
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    plot.background = element_rect(color = "white"),
    axis.ticks.x = element_line(),
    axis.text.x = element_text(angle = 60, size =12, vjust = 0.5)
  )
mhkPlot


ggsave(plot = mhkPlot, "../output/plots/MHK Plot Bayesian first prior.png", width = 9, height = 5)

#ggsave(plot = mhkPlot, "../output/plots/MHK Plot Bayesian Opt Lambda.png", width = 9, height = 5)
```

# Select top 50 most significant SNPs

```{r}
top50
```

```{r fig.width = 15, fig.height=6}
dataMerge %>% 
  dplyr::select(G, PP_GY, contains(top50$SNP)) %>% 
  pivot_longer(cols = c(3:12), 
               names_to = "SNP", 
               values_to = "genotype") %>% 
  # Add mean SNP effect
  full_join(top50[,c("meanSNPEffect", "pprob", "SNP")], by = "SNP") %>% 
  ggplot(aes(x = as.factor(genotype), y = PP_GY))+
  geom_boxplot(fill = "red4", alpha = 0.3, notchwidth = 1)+
  #geom_point(shape = 21, fill = "red4", alpha = 0.1)+
  geom_text(aes(x = Inf, 
                y = Inf, 
                label = round(meanSNPEffect,4)
                ), 
            hjust = 1.5, 
            vjust = 1.2
            )+
  facet_wrap(~fct_reorder(SNP, pprob), ncol = 5)+
  #scale_x_continuous(breaks = c(0,0.5,1))+
  theme_nice()+
  labs(x = "Genotype", y = "Yield Plasticity")

```

# Read markers

```{r}
qtl <- 
readxl::read_xlsx("../data/markers/markers.xlsx", 
                   sheet = "GENOTYPES", 
                   col_names = TRUE,
                   range = "A1:AU245") %>%  
  pivot_longer(cols = contains("M"), 
               names_to = "qtl", 
               values_to = "genotype") %>% 
  nest(.by = qtl)

alleles <- readxl::read_xlsx("../data/markers/markers.xlsx", 
                   sheet = "Alleles",
                   col_names = TRUE,
                   range = "A5:AU7") %>% 
  pivot_longer(cols = c(M1:M46), 
               names_to = "qtl", 
               values_to = "genotype") %>% 
  nest(.by = qtl)

markers <- full_join(qtl, alleles, by = join_by(qtl)) %>% 
  rename_all(~c("qtl", "genotype", "alleles")) 
  
```

```{r}
num_qtl <-
  markers %>% 
  mutate(genotype = pmap(list(genotypes = genotype, 
                              alleles = alleles), 
         function(genotypes, alleles){
           a1 <- alleles$genotype[[1]]
           a2 <- alleles$genotype[[2]]
           
           out <- genotypes %>% 
             mutate(genotype = case_when(genotype == a1 ~ 1, 
                                         genotype == a2 ~ 0,
                                         T ~ NA_real_
                                         )
                    )
           return(out)
           }
         )
         ) %>% 
  dplyr::select(-alleles) %>% 
  unnest(genotype) %>% 
  pivot_wider(names_from = qtl,values_from = genotype) %>% 
  unnest(everything()) %>% 
  # Match names on hapmap
  mutate(G = str_replace(G, "WB_", "WB-"), 
         G = case_when(G == "DOUBLESTOP_CL"~"DOUBLESTOP_CL+",
                       G == "STRAD_CL"~"STRAD_CL+",
                       G == "CO050233_2" ~ "CO050233-2",
                       T~G)
         ) %>% 
  filter(G %in% c(dataMerge$G))
  

```

```{r}
markers_snp <- 
dataMerge %>% 
  dplyr::select(G, contains(top50$SNP)) %>% 
  pivot_longer(cols = contains("S"), 
               names_to = "snp", 
               values_to = "genotype") %>% 
  full_join(num_qtl, by = join_by(G)) %>% 
  pivot_longer(cols = contains("M"), 
               names_to = "marker", 
               values_to = "genotype2") %>% 
  drop_na() %>% 
  nest(.by = c(snp, marker)) %>%
  #head() %>% 
  # delete missing values
  mutate(.,
         mod = map(data, function(data){
           tryCatch({
             mod <- lm(genotype ~ genotype2, data = data)
           }, 
           error = {
             mod <-NA
             })
           return(mod)
           }), 
         slope = map_dbl(mod, ~coef(.x)[2]), 
         pval = map_dbl(mod, ~broom::tidy(.x)$p.value[2])
         ) %>% 
  filter(slope>0.65) %>% 
  #filter(pval <=0.00001) %>% 
  dplyr::select(-mod)
```

```{r}
markers_snp$marker %>% unique()

# Lr37_A_2021

markers_snp %>% 
  filter(marker=="M7") %>% 
  filter(snp == "S2A_25070268") %>% 
  unnest(data) %>% 
  ggplot(aes(x = genotype, y = genotype2))+
  geom_point(shape = 21, fill = "red2", alpha = 0.1, size = 4)+
  labs(x = "S2A_25070268", y = "Lr37_A_2021" )+
  theme_nice()


markers_snp %>% 
  filter(marker=="M39") %>% 
  unnest(data) %>% 
  ggplot(aes(x = genotype, y = genotype2))+
  geom_point(shape = 21, fill = "red2", alpha = 0.1, size = 4)+
  labs(x = "S6A_501258683", y = "vrn-B1_AGS2000_2021")+
  theme_nice()



```

```{r}
readxl::read_xlsx("../data/markers/markers.xlsx", sheet = "Alleles")
```
