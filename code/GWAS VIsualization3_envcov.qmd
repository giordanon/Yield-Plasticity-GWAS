

```{r setup warning = F, message = F}
library(tidyverse)
library(extrafont)
library(gwaspr)

loadfonts(device = c("all", "pdf", "postscript", "win"))
`%nin%` <- Negate(`%in%`)
# Custom ggplot theme to make pretty plots
# Get the font at https://fonts.google.com/specimen/Jost
theme_nice <- function() {
  theme_minimal(base_family = "Jost") +
    theme(panel.grid.minor = element_blank(),
          plot.title = element_text(family = "Jost", face = "bold"),
          axis.title = element_text(family = "Jost Medium"),
          strip.text = element_text(family = "Jost", face = "bold",
                                    size = rel(1), hjust = 0),
          strip.background = element_rect(fill = "grey80", color = NA))
}
```

```{r message=FALSE, warning = FALSE}
files <- list.files("../output/GWAS_all_plus_envcov/", pattern = "GAPIT.Association.GWAS_Results.*",  full.names = T)

files <- files[-c(27:39)]

man <- 
  read_csv(files, id = "Model") %>% 
  dplyr::select(Model, SNP, P.value, Chr, Pos, P.value) %>% 
  mutate(.,
         Model = str_replace_all(Model, c("../output/GWAS_all/GAPIT.Association.GWAS_Results." = "", ".csv" = "")),
         P.value = -log10(P.value)
         ) %>% 
  separate(Model,c("Model", "Trait"))
```

Wrangle data for Manhattan plot

```{r}
don <-
  # Use any trait, genotype is the same
  man %>% 
  # Filter UK Chromosome
  filter(Chr != "UN") %>% 
  summarize(.by = c("Chr"), 
            chr_len = max(Pos)) %>% 
  # Calculate cumulative position of each chromosome
  mutate(tot=cumsum(chr_len)-chr_len) %>%
  dplyr::select(-chr_len) %>% 
  # Add results dataset
  left_join(man, by = join_by("Chr")) %>% 
  # Add a cumulative position of each SNP
  arrange(Chr, Pos) %>%
  mutate(BPcum=Pos+tot)

axisdf <- don %>%
  summarize(.by = "Chr", 
            center=( max(BPcum) + min(BPcum) ) / 2 )
```

Filter SNPs greater than threshold

```{r}
threshold <- -log10( 0.05 / (nrow(man)/8-1) )
# Obtain significant SNPs
sigSNP <- 
 man %>% 
  # Filter significant SNPs
  filter(P.value > threshold) %>% 
  # Filter a maximum of 10 significant SNPs per chromosome. In 2A for yield plasticity there are multiple significant SNPs together
  slice_max(.,
            by = c("Chr", "Trait"),
            n = 10, 
            -log10(P.value)) %>% 
  group_by(SNP, Chr, Trait) %>% 
  count() %>% 
  # Filter markers that appeared in more than 1 model
  filter(n>=2) %>% 
  ungroup()

join_don <- 
don[,c("Chr", "SNP", "Trait", "BPcum", "P.value")] %>% 
  summarise(.by = c(Chr, SNP, Trait, BPcum), 
            P.value = max(P.value))

sigSNP <- left_join(sigSNP,join_don , by = join_by("SNP", "Chr", "Trait"))

sigSNPplot <- sigSNP %>% 
  mutate(SNP = case_when(SNP %in% c("S2A_17607012", "S2A_6203553", "S2A_9833084")~ "Lr37/Sr38/Yr17", 
                         SNP == "S5A_579701035"~NA_character_, 
                         SNP == "S2B_803634303"~"S2B_803634303"), 
         BPcum = case_when(is.na(SNP) ~ NA_real_, T~BPcum)
         ) %>% 
  group_by(SNP, Trait) %>% 
  mutate_at(vars(n , BPcum, P.value), ~ifelse(is.na(.), NA, max(., na.rm=T))) %>% 
  unique()
```

```{r fig.width=12, fig.height=8}

trait_names <- as_labeller(c(BLUP = "Yield Mean", PP = "Yield Phenotypic Plasticity"))

mhkPlot <- 
ggplot(don, 
       aes(x = BPcum, 
           y = P.value,
           fill = Chr
           )
       )+
  geom_vline(data = sigSNPplot, 
             aes(xintercept = BPcum), linewidth = 4, alpha = 0.1, color = "grey70")+
  geom_point(aes(shape = Model), size=2, alpha =0.5)+
  geom_hline(aes(yintercept = threshold),
             linetype = "dashed",
             linewidth = 0.8)+
  ggrepel::geom_text_repel(data = sigSNPplot, 
                           aes(x = BPcum, 
                               y = P.value, 
                               label = SNP ), 
                           family = "Jost", min.segment.length = 0)+
  
  facet_wrap(~Trait, 
             scale = "free_x", 
             nrow = 2,
             labeller = trait_names)+
  scale_shape_manual(values = c(21,22, 23, 24, 25))+
  scale_x_continuous(
    label = axisdf$Chr,
    breaks = axisdf$center
  )+
  scale_size_continuous(range = c(0.5, 3)) +
  scale_fill_manual(values = rep(
    c("red3", "blue4"),
    unique(length(axisdf$Chr))
  )) +
  labs(
    x = NULL,
    y = expression(paste("-",log[10],"(P-value)") ))+
  guides(fill = "none", shape = guide_legend(override.aes = list(fill = "blue4") ))+
  theme_nice() +
  theme(
    legend.position = "top",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    plot.background = element_rect(color = "white"),
    axis.ticks.x = element_line(),
    axis.text.x = element_text(angle = 60, size =15, vjust = 0.5), 
    axis.text.y = element_text(size = 15)
  )

ggsave(plot = mhkPlot, filename = "../output/plots/Manhattan_GY_PP_GY.png", width = 12, height = 8)
```


# Raw data

Visualize the raw data to check for false positives

1. Merge genotype with the 2 phenotypes

```{r message = FALSE}
Y <- 
read_csv("../data/phenotypes/data_all_countries.csv") %>% 
  filter(Region == "Central Great Plains") %>% 
  dplyr::select(G1,YOR, PP_GY, BLUP) %>% 
  unique() %>% 
  pivot_longer(cols = c("PP_GY", "BLUP"), 
               names_to = "Trait", 
               values_to = "phenotype")

G <- read_csv("../data/genotypes/MLC80.maf05_hmp.csv", skip = 1) %>% 
  # Filter significant SNPs
  filter(rs %in% sigSNP$SNP) %>% 
  dplyr::select(rs, contains("G")) %>% 
  pivot_longer(cols = contains("G"), 
               names_to = "G1", 
               values_to = "Allele") %>% 
  rename(SNP = rs)

all <- 
full_join(G, sigSNP[,c("SNP", "Chr", "Trait")],
          by = join_by(SNP)) %>% 
  mutate(Trait = case_when(Trait == "PP"~"PP_GY", T~"BLUP")) %>% 
  left_join(Y, by = join_by(G1, Trait))

```


2. Check for false positives

```{r fig.width=15, fig.height=6}
trait_names <- as_labeller(c(BLUP = "Mean", PP_GY = "Plasticity"))

all %>% 
filter(Allele %in% c("A","G","T", "C")) %>% 
  ggplot(aes(x = Allele, y = phenotype))+
  geom_violin(aes(fill = Allele), alpha = 0.3)+
  geom_quasirandom(shape = 21, fill = "grey10", alpha = 0.5)+
  geom_boxplot(width = 0.1, outlier.shape = NA)+
  facet_grid(~Trait~SNP, 
             scales = "free")+
  scale_fill_manual(values = c("green4", "red4", "green4", "red4"))+
  theme_nice()

```

3. Check for the association of current SNPs and pre-existent QTL's

# Read Genotypes ID

```{r}
gID <- read_csv("../data/genotypes/genotypesID.csv")[,-1]
```


# Read markers

```{r}
qtl <- 
readxl::read_xlsx("../data/markers/markers.xlsx", 
                   sheet = "GENOTYPES_PAUL_1RSCMP", 
                   col_names = TRUE,
                   range = "A1:AU245") %>%  
  pivot_longer(cols = contains("M"), 
               names_to = "qtl", 
               values_to = "genotype") %>% 
  nest(.by = qtl)

alleles <- readxl::read_xlsx("../data/markers/markers.xlsx", 
                   sheet = "Alleles",
                   col_names = TRUE,
                   range = "A5:AU7") %>% 
  pivot_longer(cols = c(M1:M46), 
               names_to = "qtl", 
               values_to = "genotype") %>% 
  nest(.by = qtl)

markers <- full_join(qtl, alleles, by = join_by(qtl)) %>% 
  rename_all(~c("qtl", "genotype", "alleles")) 
  
```

```{r}
num_qtl <-
  markers %>% 
  mutate(genotype = pmap(list(genotypes = genotype, 
                              alleles = alleles), 
         function(genotypes, alleles){
           a1 <- alleles$genotype[[1]]
           a2 <- alleles$genotype[[2]]
           
           out <- genotypes %>% 
             mutate(genotype = case_when(genotype == a1 ~ "no", 
                                         genotype == a2 ~ "yes",
                                         T ~ NA_character_
                                         )
                    )
           return(out)
           }
         )
         ) %>% 
  dplyr::select(-alleles) %>% 
  unnest(genotype) %>% 
  pivot_wider(names_from = qtl,values_from = genotype) %>% 
  unnest(everything()) %>% 
  # Match names on hapmap
  mutate(G = str_replace(G, "WB_", "WB-"), 
         G = case_when(G == "DOUBLESTOP_CL"~"DOUBLESTOP_CL+",
                       G == "STRAD_CL"~"STRAD_CL+",
                       G == "CO050233_2" ~ "CO050233-2",
                       T~G)
         ) %>% 
  right_join(gID, by = join_by(G))

markers$alleles
```

# Merge SNPs data and marker data

Filter significant SNps only

```{r}
markers_snp <- 
  G %>% 
  # Filter NAs
  filter(Allele %in% c("A","G","T", "C")) %>% 
  # Filter out SNP that seems a false positive
  filter(SNP %nin% c("S5A_579701035")) %>% 
  full_join(num_qtl, by = join_by(G1)) %>% 
  pivot_longer(cols = contains("M"), 
               names_to = "marker", 
               values_to = "genotype2") %>% 
  drop_na() %>% 
  nest(.by = c(SNP, marker)) %>% 
  # Filter unnecesary markers
  filter(marker %nin% c(# For these markers Mary did the Haplotype in M43
                        "M37", "M38", "M39", "M40", "M41", "M42", 
                        # This markers failes
                        "M4", "M26", "M5")) %>% 
  # delete missing values
  mutate(.,
         # Change alleles to yes or no
         data = map(data, ~.x %>% 
                      mutate(.,
                             Allele = as.numeric(as.factor(Allele)), 
                             # This line is the one I can change the level of the allele
                             Allele = case_when(Allele == 2 ~ "no",T~"yes")
                             )
                    )
         )

# This methods is subject to which level I assign to the alleles
cohens <- 
  markers_snp %>%
  mutate(.,
         cohens = map(data, ~irr::kappa2(.x[, c("Allele", "genotype2")])), 
         kappa = map_dbl(cohens, ~.x$value)
         ) %>% 
  filter(kappa>0.2)

# The chi-squared test can check for independence of two variables, doesnt take into consideration the levels. 
chi.sq <- 
  markers_snp %>%
  mutate(.,
         chi.sq = map(data, ~chisq.test(table(.x$Allele, .x$genotype2))), 
         pvalue = map_dbl(chi.sq, ~.x$p.value)
         ) %>% 
  filter(pvalue < 1e-5)

# Visualize the confusion matrix
confusion_matrix <- 
chi.sq %>% 
  mutate(confusion_matrix = pmap(list(..1 = data, ..2 = SNP, ..3 = marker),
                                 ~metrica::confusion_matrix(.x, 
                                                           # This is the SNP
                                                           pred = Allele,
                                                           # This is the marker
                                                           obs = genotype2,
                                                           plot = TRUE,
                                                           print_metrics = TRUE)+
                                   labs(x = ..2, y = ..3)
                                )
         )

confusion_matrix$confusion_matrix
```

# Yield Plasticity - YOR and SNPs

```{r}
all %>% 
  separate(SNP, c("Chr", "Pos"), "_") %>% 
  filter(Chr %in% c("S2A")) %>% 
  filter(Allele %in% c("G", "C")) %>% 
  ggplot(aes(x = YOR, y = phenotype, fill = Allele))+
  geom_point(shape = 21, alpha = 0.8, size = 4)+
  facet_wrap(~Trait, scales = "free_y")+
  theme_nice()
```

# PCA output

Decide how many PC's to include as covariates in the model

```{r}
xx <- read.csv("../output/GWAS_all/GAPIT.Genotype.PCA_eigenvalues.csv") %>% slice(1:10) %>%
  mutate(y = x, x = 1:10)
mp <- ggplot(xx,  aes(x = x, y = y)) + 
  geom_line(size = 1) + 
  geom_point(size = 3, pch = 21, fill = "darkgreen", alpha = 0.7) +
  geom_point(data = xx %>% slice(7), size = 3, pch = 21, fill = "darkred") +
  scale_x_continuous(breaks = 1:10) +
  theme_gwaspr() +
  labs(x = "PC", y = "Eigen Values")
mp
```


```{r}
read.csv("../output/GWAS_all/GAPIT.Genotype.PCA.csv") %>% 
  rename(G1 = taxa) %>% 
  full_join(G) %>% 
  filter(SNP %in% c(sigSNP$SNP)) %>% 
  ggplot(aes(x = PC1, y = PC2, fill= Allele))+
  geom_point(shape = 21, size=3)+
  facet_wrap(~SNP)+
  theme_nice()

```






