---
title: "Heritability"
format: html
editor: visual
---

# Heritability

```{r include = FALSE}
# Packages
library(tidyverse)
library(brms)
library(rstan)
library(tidybayes)
library(emmeans)
library(FW)
library(extrafont)
rstan_options(auto_write = TRUE, silent = TRUE)
options(mc.cores = parallel::detectCores())
# Colors from MetBrewer
clrs <- MetBrewer::met.brewer("Java")

loadfonts(device = c("all", "pdf", "postscript", "win"))
`%nin%` <- Negate(`%in%`)
# Custom ggplot theme to make pretty plots
# Get the font at https://fonts.google.com/specimen/Jost
theme_nice <- function() {
  theme_minimal(base_family = "Jost") +
    theme(panel.grid.minor = element_blank(),
          plot.title = element_text(family = "Jost", face = "bold"),
          axis.title = element_text(family = "Jost Medium"),
          strip.text = element_text(family = "Jost", face = "bold",
                                    size = rel(1), hjust = 0),
          legend.position = "top",
          axis.line = element_line(),
          plot.background = element_rect(fill = "white"),
          axis.text = element_text(size = 12),
          strip.background = element_rect(fill = "grey80", color = NA)
          )
}

```

## Load data

```{r message = FALSE}
dataVPT <- read_csv("../../data/phenotypes/dataVPT.csv") %>% 
  select(G, E, R, GY) %>% 
  # filter data with 4 reps only
  #filter(R <= 4) %>% 
  mutate(R = as.factor(R))

h2data <- 
left_join(by = join_by(G),
  dataVPT,
  read.csv("../../data/phenotypes/var_traits_final_YOR.csv")[, c("G", "YOR")] %>% 
  # String operations to merge with genotype data
  mutate(.,
         G = str_replace_all(G, " ", "_"), 
         G = str_replace_all(G, "/", "-"), 
         G = str_replace_all(G, "'", ""), 
         G = str_replace_all(G, "SNOWMASS_2.0", "SNOWMASS_2"), 
         G = str_replace_all(G, "BAKER_S_ANN", "BAKERS_ANN"), 
         G = str_replace_all(G, "SMITH_S_GOLD", "SMITHS_GOLD")
         ) %>% 
  # These cultivars don't have marker data
  filter(G %nin% c("AGSECO_7853", "CSU_BLEND09", "JAG,2137", "JEI_110",
                   "KALVESTA", "OK05312", "SY_LLANO","TAM_113","TONKAWA")) 
  ) %>% 
  drop_na(YOR) %>% 
  mutate_if(is.character, as.factor)
```

# FW equation to calculate H2

Use posterior distribution of variance estimates to calculate h2

```{r include = FALSE}
years <- seq(1989	, max(h2data$YOR))

H2 <- matrix(NA,nrow = 100, ncol = 2)

H2 <- data.frame(.h2 = rep(NA, 100), 
                 .yor = rep(NA, 100)) %>% 
  mutate(.h2 = as.list(.h2), 
         .yor = as.double(.yor))

window_size = 10

# Initialize the index
i <- 1
# Loop through the vector
while (i <= (length(years) - window_size + 1)) {
  # Get the current window
  window <- years[i:(i + window_size - 1)]
  
  dat <- h2data %>% filter(YOR %in% window) %>% 
    nest(.by = "E") %>%
    mutate(n = map_dbl(data, ~nrow(unique(.[,"G"]))
                       )
           ) %>%
    filter(n>10) %>%
    unnest(data)
  
  suppressMessages(
  # Here goes function to calculate h2
  fw <- FW(y= dat$GY,
             VAR= dat$G, 
             ENV=dat$E,
             method="Gibbs",
             nchain = 1, 
             seed = 123,#c(rep(123, 3)),
             burnIn = 2000, 
             nIter = 5000)
  )
  
  load(file='samps.rda')
  
  ng <- length(fw$VARlevels)
  ne <- length(fw$ENVlevels)
  # Get estimates from the entire posterior distribution
  var_g <- c(samps[[1]][,"var_g"])#, samps[[2]][,"var_g"], samps[[3]][,"var_g"])
  #var_b <- c(samps[[1]][,"var_b"])#, samps[[2]][,"var_b"], samps[[3]][,"var_b"])
  #var_h <- c(samps[[1]][,"var_h"])#, samps[[2]][,"var_h"], samps[[3]][,"var_h"])
  var_e <- c(samps[[1]][,"var_e"])#, samps[[2]][,"var_e"], samps[[3]][,"var_e"])

  #var_g <- var_g
  #var_b <- var_b/ne
  #var_h <- var_h/ne
  #var_e <- var_e#/(nrow(dat) - (ng+ne))
  
  
  #.h2 <- var_g/ mapply(sum, var_g, var_b, var_h, var_e)
  .h2 <- var_g/ mapply(sum, var_g, var_e)

  
  H2$.h2[[i]] <- list(.h2)
  # Average year of the window
  H2[i,".yor"] <- window[5]
  print(window)
  # Increment the index
  i <- i + 1
}


plot(H2$.yor, H2$.h2)
hist(.h2)

# Save entire h2 posterior
saveRDS(drop_na(H2), "../../output/model output/h2_10_year_rolling_avg_h2_suetal_posterior.RData")

saveRDS(drop_na(H2), "../../output/model output/h2_10_year_rolling_avg_h2_plasticity_posterior.csv")
```

```{r}
dat %>% 
  filter(E == "2000 AKRON, CO")
```



```{r include = FALSE}
H2data <- 
H2 %>% 
  drop_na() %>% 
  unnest(.h2) %>% 
  unnest(.h2)

p <- 
H2data %>% 
  group_by(.yor) %>% 
  mutate(mean = mean(.h2)) %>% 
  ggplot(aes(x = .yor, y = .h2))+
  geom_point(position = position_jitter(width = 1), alpha = 0.05)+
  geom_point(aes(x = .yor, y = mean), color = "red4", size = 3)+
  #geom_smooth(method = "lm")+
  labs(x = "Year of Release", y = "Heritability")+
  scale_y_continuous(breaks = seq(0, 0.7, 0.05))+
  scale_x_continuous(breaks = seq(1960, 2030, 5), limits = c(1989, 2020))+
  theme_nice()
p
ggsave(plot = p, filename = "../../output/plots/paper/h2_plasticity_FW_posterior.png")
  
```

# Heritability - YOR

```{r}
modh2 <- brm(
     bf(.h2 ~ .yor),
     chains = 1,
     warmup = 2000,
     iter = 4000, 
     data = H2data, 
     control = list(adapt_delta = 0.95),
     family = Beta(link = "logit")
     )
saveRDS(modh2, "../output/model_h2_yor.RData")
```

```{r}
modh2 <- readRDS("../output/model_h2_yor.RData")

newdata <- expand_grid(.yor = seq(min(modh2$data$.yor), 
                                  max(modh2$data$.yor), 
                                  length.out = 100
                                  )
                        )


preds <- add_predicted_draws(modh2, 
                             newdata = newdata, value = ".predicted") %>% 
  summarise(.groups = "keep",
            q050 = mean(.predicted), 
            q975 = quantile(.predicted, probs = .975), 
            q025 = quantile(.predicted, probs = 0.025))


```

```{r}
p <- 
ggplot()+
  geom_vline(aes(xintercept = 1967+34), linewidth = 1, linetype = "dashed", color = "grey50")+
  
  geom_line(data = preds, aes(x = YOR, 
                              y = q050), linewidth = 1)+
  geom_ribbon(data = preds, aes(x = YOR,
                                  ymax = q975, ymin = q025), alpha = 0.2)+
  geom_point(data = h2_piepho,
             aes(x = YOR, y = .h2), alpha = .6, shape = 21, size=3, fill = "red4")+
  #scale_x_continuous(breaks = seq(1960, 2030, 5), limits = c(1995, 2030))+
  scale_x_continuous(breaks = seq(1960, 2030, 5), limits = c(1965, 2030))+

  labs(x = expression("Year of release"), 
       y = expression("Broad sense heritability")
       )+
  theme_nice()
p
```
